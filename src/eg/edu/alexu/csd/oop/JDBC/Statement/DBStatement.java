package eg.edu.alexu.csd.oop.JDBC.Statement;

import java.sql.*;

public abstract class DBStatement implements Statement {
    @Override
    abstract public ResultSet executeQuery(String sql) throws SQLException ;

    @Override
    public abstract int  executeUpdate(String sql) throws SQLException ;
    @Override
    public abstract void close() throws SQLException ;

    @Override
    public int getMaxFieldSize() throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public int getMaxRows() throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public abstract int getQueryTimeout() throws SQLException ;

    @Override
    public abstract void setQueryTimeout(int seconds) throws SQLException ;

    @Override
    public void cancel() throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public void clearWarnings() throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public abstract boolean execute(String sql) throws SQLException ;
    @Override
    public ResultSet getResultSet() throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public int getFetchDirection() throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public int getFetchSize() throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public int getResultSetType() throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public abstract void addBatch(String sql) throws SQLException ;
    @Override
    public abstract void clearBatch() throws SQLException ;
    @Override
    public abstract int[] executeBatch() throws SQLException ;
    @Override
    public abstract Connection getConnection() throws SQLException;
    @Override
    public boolean getMoreResults(int current) throws SQLException {
        throw new java.lang.UnsupportedOperationException();    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        throw new java.lang.UnsupportedOperationException();    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        throw new java.lang.UnsupportedOperationException();    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        throw new java.lang.UnsupportedOperationException();    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        throw new java.lang.UnsupportedOperationException();    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        throw new java.lang.UnsupportedOperationException();    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        throw new java.lang.UnsupportedOperationException();    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        throw new java.lang.UnsupportedOperationException();    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        throw new java.lang.UnsupportedOperationException();    }

    @Override
    public boolean isClosed() throws SQLException {
        throw new java.lang.UnsupportedOperationException();    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public boolean isPoolable() throws SQLException {
        throw new java.lang.UnsupportedOperationException();    }

    @Override
    public void closeOnCompletion() throws SQLException {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        throw new java.lang.UnsupportedOperationException();    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        throw new java.lang.UnsupportedOperationException();    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        throw new java.lang.UnsupportedOperationException();    }
}
